#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/PoseStamped.h>
#include <cmath>
#define random(x) (rand()%x)
using namespace geometry_msgs;
using namespace std;
int main(int argc, char** argv){

  ros::init(argc, argv, "goforward");
  ros::NodeHandle node;

  ros::Publisher cmd_vel = node.advertise<geometry_msgs::Twist>("cmd_vel_mux/input/navi", 15);
  ros::Rate rate(15);
  Twist cmd_move;

  tf::TransformListener poselistener;

  double kp(2),ki(0.0),kd(0);//PID参数
  double offset(0);//位置中线，用于计算error
  double linear(0),theta(0);//前进速度,旋转速度
  double integral(0),derivative(0),lasterror(0),error(0);

  while (node.ok())
  {
    bool position_true(true);
	//读取定位数据
    tf::StampedTransform posetransform;
    try{
      poselistener.waitForTransform( "/world", "/robot", ros::Time(0), ros::Duration(1.0));
      poselistener.lookupTransform( "/world", "/robot", ros::Time(0), posetransform);
    }
    catch (tf::TransformException ex){
      ROS_ERROR("%s",ex.what());
      //ros::Duration(1.0).sleep();
      position_true = false;
    }
    if(position_true)
    {
      //停止
      if(abs(posetransform.getOrigin().x()) >= 6)
        break;
      //PID控制计算
      error = posetransform.getOrigin().y() - offset;
      integral = integral + error;
      derivative = error - lasterror;
      theta = kp*error + ki*integral +kd*derivative;
      lasterror = error;
      if(theta >= 0.3)
        theta = 0.3;
      if(theta <= -0.3)
        theta = -0.3;
      //速度命令
     if(abs(posetransform.getOrigin().x()) >= 5.5)
      cmd_move.linear.x = 0.05;
     else
      cmd_move.linear.x = 0.01+ linear;
      cmd_move.angular.z = -theta;
    }
    else
    {
      cmd_move.linear.x = 0;
      cmd_move.angular.z = 0;
    }
          if(linear >= 0.3)
            linear = 0.3;
          if(linear <= -0.3)
            linear = -0.3;
    cmd_vel.publish(cmd_move);
    rate.sleep();

  }
  return 0;
};


