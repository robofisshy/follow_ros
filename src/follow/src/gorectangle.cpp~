#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/PoseStamped.h>
#include <cmath>

using namespace geometry_msgs;
using namespace std;

 struct point
 {
     double x,y;
 };


tf::TransformListener poselistener;
bool getposition(tf::StampedTransform &posetransform)
{
 //tf::StampedTransform posetransform;
 try {
  poselistener.waitForTransform("/world", "/robot", ros::Time(0), ros::Duration(1.0));
  poselistener.lookupTransform("/world", "/robot", ros::Time(0), posetransform);
 }
 catch (tf::TransformException ex) {
  ROS_ERROR("%s", ex.what());
  //ros::Duration(1.0).sleep();
  return false;
 }
 return true;
}

int main(int argc, char** argv){

  ros::init(argc, argv, "gorectangle");
  ros::NodeHandle node;

  ros::Publisher cmd_vel = node.advertise<geometry_msgs::Twist>("cmd_vel_mux/input/navi", 5);
  ros::Rate rate(15);

  tf::StampedTransform posetransform;
  Twist cmd_move;
  int modle(1);
  while (node.ok())
  {
    point start{0,0}, end{0,0};
    double orientation(0);
    if(modle ==1)
    {
      start = {0,0}; end = {2,0}; orientation = 0;
    }
    if(modle ==2)
    {
      start = {2,0}; end = {2,2}; orientation = 1.5708;
    }
    if(modle ==3)
    {
      start = {2,2}; end = {0,2}; orientation = 3.1416;
    }
    if(modle ==4)
    {
      start = {0,2}; end = {0,0}; orientation = -1.5708;
    }

    double kp(1),ki(0),kd(0);//PID参数
    double offset(0);//位置中线，用于计算error
    double linear(0.2),theta(0);//前进速度,旋转速度
    double integral(0),derivative(0),lasterror(0),error(0);
    int count = 0;
    while (1)
    {
      if(getposition(posetransform))
      {
        //旋转角度
        double dtheta;
        if((orientation - posetransform.getOrigin().z()) >= 3.1416)
          dtheta = orientation - posetransform.getOrigin().z() - 3.1416;
        else if((orientation - posetransform.getOrigin().z()) <= -3.1416)
          dtheta = orientation - posetransform.getOrigin().z() + 3.1416;
        else
          dtheta = abs(orientation - posetransform.getOrigin().z());
        if(count == 0)
        {
          while (dtheta >= 0.08)
          {
            if(getposition(posetransform))
            {
              //旋转角度
              if((orientation - posetransform.getOrigin().z()) >= 3.1416)
                dtheta = orientation - posetransform.getOrigin().z() - 3.1416;
              else if((orientation - posetransform.getOrigin().z()) <= -3.1416)
                dtheta = orientation - posetransform.getOrigin().z() + 3.1416;
              else
                dtheta = abs(orientation - posetransform.getOrigin().z());
              cmd_move.linear.x = 0;
              cmd_move.angular.z = 0.3;
            }
            else
            {
              cmd_move.linear.x = 0;
              cmd_move.angular.z = 0;
            }
            cmd_vel.publish(cmd_move);
            rate.sleep();
          }
          count = 1;
        }
        else
        {
          if(start.x == end.x)
          {
            offset = start.x;
            error = posetransform.getOrigin().x() - offset;
            if(end.y - 0.4 <= posetransform.getOrigin().y() <= end.y + 0.4)
              linear = end.y - posetransform.getOrigin().y();
            if(end.y - 0.02 <= posetransform.getOrigin().y() <= end.y + 0.02)
              break;
          }
          if(start.y == end.y)
          {
            offset = start.y;
            error = posetransform.getOrigin().y() - offset;
            if(end.x - 0.4 <= posetransform.getOrigin().x() <= end.x + 0.4)
              linear = end.x - posetransform.getOrigin().x();
            if(end.x - 0.02 <= posetransform.getOrigin().x() <= end.x + 0.02)
              break;
          }
          integral = integral + error;
          derivative = error - lasterror;
          theta = kp*error + ki*integral +kd*derivative;
          lasterror = error;
          if(theta >= 0.5)
            theta = 0.5;
          if(theta <= -0.5)
            theta = -0.5;
          //速度命令
          if(dtheta >= 0.7)
            cmd_move.linear.x = 0;
          else
            cmd_move.linear.x = linear;
          cmd_move.angular.z = theta;

        }
      }
      else
      {
        cmd_move.linear.x = 0;
        cmd_move.angular.z = 0;
      }
      cmd_vel.publish(cmd_move);
      rate.sleep();
    }
    modle++;
    if(modle > 4)
      modle = 1;
  }
  return 0;
};


