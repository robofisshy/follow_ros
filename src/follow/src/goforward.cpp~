#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/PoseStamped.h>
#include <cmath>

using namespace geometry_msgs;
using namespace std;

 struct point
 {
     double x,y;
 };

int main(int argc, char** argv)
{
  ros::init(argc, argv, "goforward");
  ros::NodeHandle node;
  ros::Publisher cmd_vel = node.advertise<geometry_msgs::Twist>("cmd_vel_mux/input/navi", 15);
  ros::Rate rate(5);
  tf::TransformListener poselistener;
  Twist cmd_move;
  int modle(1);
  bool second(false);
  while (node.ok())
  {
    point start{0,0}, end{0,0};
    double orientation(0);
    if(modle ==1)
    {
      start = {0,0}; end = {3,0}; orientation = 0;
    }
    if(modle ==2)
    {
      start = {3,0}; end = {3,3}; orientation = 1.5708;
    }
    if(modle ==3)
    {
      start = {3,3}; end = {0,3}; orientation = 3.1416;
    }
    if(modle ==4)
    {
      start = {0,3}; end = {0,0}; orientation = -1.5708;
    }
    
    double kp,ki,kd;//PID参数
    double offset(0);//位置中线，用于计算error
    double linear(0),theta(0);//前进速度,旋转速度
    double integral(0),derivative(0),lasterror(0),error(0);
	node.param<double>("kp", kp, 2);
	node.param<double>("ki", ki, 0);
	node.param<double>("kd", kd, 12);
    int count = 0;
    cout<<"modle = "<<modle<<endl;
    while (node.ok())
    {
      bool position_true(true);
      //读取定位数据
      tf::StampedTransform posetransform;
      try{
        //poselistener.waitForTransform( "/world", "/robot", ros::Time(0), ros::Duration(1.0));
        poselistener.lookupTransform( "/world", "/robot", ros::Time(0), posetransform);
      }
      catch (tf::TransformException ex){
        ROS_ERROR("%s",ex.what());
        //ros::Duration(1.0).sleep();
        position_true = false;
      }
      if(position_true)
      {
        //旋转角度
        double dtheta;
        if((orientation - posetransform.getOrigin().z()) >= 3.1416)
          dtheta = abs(orientation - posetransform.getOrigin().z() - 6.2832);
        else if((orientation - posetransform.getOrigin().z()) <= -3.1416)
          dtheta = abs(orientation - posetransform.getOrigin().z() + 6.2832);
        else
          dtheta = abs(orientation - posetransform.getOrigin().z());
        if(count == 0)
        {
          cout<<"go round"<<"   dtheta= "<<dtheta<<endl;
          while (dtheta >= 0.08 &&second&&node.ok())
          {
            cout<<"go round"<<"   dtheta= "<<dtheta<<endl;
            bool position_true2 = true;
            //读取定位数据
            try{
              //poselistener.waitForTransform( "/world", "/robot", ros::Time(0), ros::Duration(1.0));
              poselistener.lookupTransform( "/world", "/robot", ros::Time(0), posetransform);
            }
            catch (tf::TransformException ex){
              ROS_ERROR("%s",ex.what());
              //ros::Duration(1.0).sleep();
              position_true2 = false;
            }
            if(position_true2)
              {
                //旋转角度
                if((orientation - posetransform.getOrigin().z()) >= 3.1416)
                  dtheta = abs(orientation - posetransform.getOrigin().z() - 6.2832);
                else if((orientation - posetransform.getOrigin().z()) <= -3.1416)
                  dtheta = abs(orientation - posetransform.getOrigin().z() + 6.2832);
                else
                  dtheta = abs(orientation - posetransform.getOrigin().z());
                cmd_move.linear.x = 0;
                cmd_move.angular.z = 0.2;
              }
              else
              {
                cmd_move.linear.x = 0;
                cmd_move.angular.z = 0;
              }
              cmd_vel.publish(cmd_move);
              rate.sleep();
          }
          count = 1;
        }
        else
        {
          cout<<"go line"<<endl;
          double fuhao;
          if(start.x == end.x)
          {
            offset = start.x;
            error = posetransform.getOrigin().x() - offset;
            if( abs(posetransform.getOrigin().y()-end.y) <= 1)
              linear = linear -0.03;
            else
              linear =0.05+ linear;
            if(end.y - 0.03 <= posetransform.getOrigin().y() && posetransform.getOrigin().y()<= end.y + 0.03)
              break;
            cout<<modle<<"distance = "<<posetransform.getOrigin().y() - end.y<<endl;
          }
          if(start.y == end.y)
          {
            offset = start.y;
            error = posetransform.getOrigin().y() - offset;
             if( abs(posetransform.getOrigin().x()-end.x) <= 1)
              linear = linear -0.03;
            else
              linear =0.05+ linear;
            if(end.x - 0.03 <= posetransform.getOrigin().x() && posetransform.getOrigin().x()<= end.x + 0.03)
              break;
            cout<<modle<<"distance = "<<posetransform.getOrigin().x() - end.x<<endl;
            cout<<"posetransform.getOrigin().x() = "<<posetransform.getOrigin().x()<<endl;
          }
          integral = integral + error;
          derivative = error - lasterror;
          theta = kp*error + ki*integral +kd*derivative;
          
          lasterror = error;
          if(theta >= 0.5)
            theta = 0.5;
          if(theta <= -0.5)
            theta = -0.5;
          if(linear >= 0.5)
            linear = 0.5;
          if(linear <= 0.05)
            linear = 0.05;
          //速度命令
         //if(dtheta >= 0.7)
           // cmd_move.linear.x = 0;
         // else
            cmd_move.linear.x = linear;
          if(modle == 1 || modle == 4)
            fuhao = -1;
          if(modle == 2 || modle == 3)
            fuhao = 1;
          cmd_move.angular.z = fuhao*theta;

        }
      }
      else
      {
        cmd_move.linear.x = 0;
        cmd_move.angular.z = 0;
      }
      cout<<"cmd_move.linear = "<<cmd_move.linear.x<<"  cmd_move.angular = "<<cmd_move.angular.z<<endl;
      cmd_vel.publish(cmd_move);
      rate.sleep();
    }
    modle++;
    second = true;
    if(modle > 4)
      modle = 1;
  }
  return 0;
}



