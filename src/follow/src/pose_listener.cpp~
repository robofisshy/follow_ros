#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/PoseStamped.h>
#include <cmath>

int main(int argc, char** argv){
  ros::init(argc, argv, "pose_listener");

  ros::NodeHandle node;
  ros::Publisher turtlebot_pose = 
  node.advertise<geometry_msgs::PoseStamped>("turtlebot2_pose", 10);

  tf::TransformListener poselistener;
  
 ros::Rate rate(10.0);
  while (node.ok()){
    tf::StampedTransform posetransform;
    try{
      poselistener.waitForTransform( "/odom", "/base_footprint", ros::Time(0), ros::Duration(1.0));
      poselistener.lookupTransform( "/odom", "/base_footprint", ros::Time(0), posetransform);
    }
    catch (tf::TransformException ex){
      ROS_ERROR("%s",ex.what());
      ros::Duration(1.0).sleep();
    }
	geometry_msgs::PoseStamped pose;
	pose.header.frame_id = "/base_footprint";
	pose.header.stamp = ros::Time::now();
	pose.pose.position.x = posetransform.getOrigin().x();
	pose.pose.position.y = posetransform.getOrigin().y();
	pose.pose.orientation.z = posetransform.getRotation().z();
	pose.pose.orientation.w = posetransform.getRotation().w();
	pose.pose.orientation.x = 2 * std::atan2(posetransform.getRotation().z(), posetransform.getRotation().w()) * 180 / 3.14159;
        turtlebot_pose.publish(pose);

    rate.sleep();
  }
  return 0;
};
